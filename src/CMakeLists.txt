# Set up ARGoS compilation information
include_directories(${CMAKE_SOURCE_DIR} ${ARGOS_INCLUDE_DIRS})
link_directories(${ARGOS_LIBRARY_DIRS})

# Headers
set(AUTOMODE_HEADERS
	AutoMoDeController.h
	core/AutoMoDeRabBuffer.h
	core/AutoMoDeFiniteStateMachine.h
	core/AutoMoDeFsmBuilder.h
	core/AutoMoDeFsmHistory.h
	core/AutoMoDeRobotDAO.h
	core/AutoMoDeLoopFunctions.h
	# Behaviours
	modules/AutoMoDeBehaviour.h
	modules/AutoMoDeBehaviourAntiPhototaxis.h
	modules/AutoMoDeBehaviourPhototaxis.h
	modules/AutoMoDeBehaviourAttraction.h
	modules/AutoMoDeBehaviourRepulsion.h
	modules/AutoMoDeBehaviourStop.h
	modules/AutoMoDeBehaviourExploration.h
	# Conditions
	modules/AutoMoDeCondition.h
	modules/AutoMoDeConditionBlackFloor.h
	modules/AutoMoDeConditionWhiteFloor.h
	modules/AutoMoDeConditionGrayFloor.h
	modules/AutoMoDeConditionNeighborsCount.h
	modules/AutoMoDeConditionInvertedNeighborsCount.h
	modules/AutoMoDeConditionFixedProbability.h)

# Sources
set(AUTOMODE_SOURCES
	AutoMoDeController.cpp
	core/AutoMoDeRabBuffer.cpp
	core/AutoMoDeFiniteStateMachine.cpp
	core/AutoMoDeFsmBuilder.cpp
	core/AutoMoDeRobotDAO.cpp
	core/AutoMoDeFsmHistory.cpp
	core/AutoMoDeLoopFunctions.cpp
	# Behaviours
	modules/AutoMoDeBehaviour.cpp
	modules/AutoMoDeBehaviourAntiPhototaxis.cpp
	modules/AutoMoDeBehaviourPhototaxis.cpp
	modules/AutoMoDeBehaviourAttraction.cpp
	modules/AutoMoDeBehaviourRepulsion.cpp
	modules/AutoMoDeBehaviourStop.cpp
	modules/AutoMoDeBehaviourExploration.cpp
	# Conditions
	modules/AutoMoDeCondition.cpp
	modules/AutoMoDeConditionBlackFloor.cpp
	modules/AutoMoDeConditionWhiteFloor.cpp
	modules/AutoMoDeConditionGrayFloor.cpp
	modules/AutoMoDeConditionNeighborsCount.cpp
	modules/AutoMoDeConditionInvertedNeighborsCount.cpp
	modules/AutoMoDeConditionFixedProbability.cpp)

if(ARGOS_BUILD_FOR_SIMULATOR)
	add_library(automode SHARED ${AUTOMODE_HEADERS} ${AUTOMODE_SOURCES})
	target_link_libraries(automode argos3plugin_${ARGOS_BUILD_FOR}_epuck)

	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
	add_executable(automode_main AutoMoDeMain.cpp)
	target_link_libraries(automode_main automode argos3core_${ARGOS_BUILD_FOR}  argos3plugin_${ARGOS_BUILD_FOR}_epuck)

elseif(ARGOS_BUILD_FOR_EPUCK)
	add_executable(automode
        ${AUTOMODE_HEADERS}
        ${AUTOMODE_SOURCES})

	target_link_libraries(automode
    	argos3plugin_${ARGOS_BUILD_FOR}_epuck)
endif(ARGOS_BUILD_FOR_SIMULATOR)
